// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens        Token[]
  accounts      Account[]
  Category      Category[]
  TypeOfExpense TypeOfExpense[]
  Transaction   Transaction[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum CategoryType {
  INCOME
  OUTCOME
}

model Category {
  id          String       @id @default(uuid())
  name        String
  description String
  type        CategoryType
  goalValue   Float        @map("goal_value")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Transaction Transaction[]

  @@map("categories")
}

model TypeOfExpense {
  id          String @id @default(uuid())
  name        String
  description String
  goalValue   Float  @map("goal_value")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Transaction Transaction[]

  @@map("type_of_expenses")
}

enum TransactionTypeEnum {
  INCOME
  OUTCOME
}

enum PaymentFormEnum {
  CREDIT
  MONEY
  DEBIT
  PIX
}

model Transaction {
  id          String              @id @default(uuid())
  name        String
  description String
  date        DateTime
  value       Float
  type        TransactionTypeEnum
  paymentForm PaymentFormEnum

  userId          String @map("user_id")
  categoryId      String @map("category_id")
  typeOfExpenseId String @map("type_of_expense_id")

  user User @relation(fields: [userId], references: [id])

  category Category @relation(fields: [categoryId], references: [id])

  typeOfExpense TypeOfExpense @relation(fields: [typeOfExpenseId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transactions")
}
